<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Farha, My Heaven’s Jewel</title>
  <style>
    @import url('https://fonts.googleapis.com/css2?family=Noto+Naskh+Arabic&display=swap');

    body {
      margin: 0;
      overflow: auto;
      background: radial-gradient(circle at center, #0b171f 0%, #030508 100%);
      font-family: 'Noto Naskh Arabic', serif;
      overscroll-behavior: none;
    }

    #scene-container {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      z-index: -1;
    }

    #starfall {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      z-index: 0;
      background: transparent;
      pointer-events: none;
    }

    audio {
      display: none;
    }

    @keyframes heartbeat {
      from {
        text-shadow: 0 0 15px #f7e7c6, 0 0 30px #f7e7c6, 0 0 45px #f7e7c6;
        transform: scale(1);
      }
      to {
        text-shadow: 0 0 30px #e8c58a, 0 0 45px #e8c58a, 0 0 60px #e8c58a;
        transform: scale(1.03);
      }
    }

    @keyframes unveil {
      to {
        opacity: 1;
      }
    }

    button:hover {
      transform: scale(1.1);
      box-shadow: 0 0 30px rgba(59, 109, 126, 1);
    }

    button:active {
      transform: scale(0.95);
    }

    @media (max-width: 600px) {
      #scene-container canvas {
        transform: scale(0.6);
      }
    }
  </style>
</head>
<body>

  <!-- Background Audio -->
  <audio id="bg-audio" src="https://cdn.pixabay.com/download/audio/2022/03/15/audio_9c5c84a4b1.mp3?filename=love-ambient-110379.mp3" autoplay loop></audio>

  <!-- Calligraphy Background -->
  <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/3/36/Bismillah.svg/2560px-Bismillah.svg.png" 
       style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); opacity: 0.03; z-index: 0; max-width: 80vw;" 
       alt="calligraphy background" />

  <!-- Stars -->
  <canvas id="starfall"></canvas>

  <!-- Three.js scene container -->
  <div id="scene-container"></div>

  <!-- Main Content -->
  <div style="position: relative; width: 100%; min-height: 100vh; display: flex; flex-direction: column; justify-content: center; align-items: center; color: #f7e7c6; text-align: center; z-index: 1; padding: clamp(20px, 6vw, 30px); box-sizing: border-box;">
    <h1 id="main-text" style="font-size: clamp(1.5rem, 5vw, 2rem); text-shadow: 0 0 15px #f7e7c6, 0 0 30px #f7e7c6; margin: 0; line-height: 1.6; animation: heartbeat 4s ease-in-out infinite alternate; max-width: 90%; text-transform: lowercase;">
      farha, today i am 1b hexadecimally
    </h1>
    <button id="learn-more" style="margin: clamp(20px, 5vw, 30px) 0; padding: clamp(12px, 3.5vw, 14px) clamp(25px, 6vw, 30px); font-size: clamp(0.9rem, 3.5vw, 1rem); background: linear-gradient(45deg, #3b6d7e, #1f3c49); color: #f7e7c6; border: none; border-radius: 35px; cursor: pointer; box-shadow: 0 0 25px rgba(59, 109, 126, 0.7); transition: transform 0.5s, box-shadow 0.5s; font-family: 'Noto Naskh Arabic', serif; letter-spacing: 1.5px;">
      reveal my heart’s dua
    </button>
    <p id="hidden-message" style="display: none; font-size: clamp(1rem, 4vw, 1.2rem); margin: clamp(20px, 5vw, 25px) 0 0; opacity: 0; text-shadow: 0 0 15px #f7e7c6; transition: opacity 2.5s ease-in-out; line-height: 1.7; max-width: 85%; text-transform: lowercase;">
    </p>
  </div>

  <!-- Three.js + Magic Script -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r134/three.min.js"></script>
  <script>
    // THREE.JS Setup
    const container = document.getElementById('scene-container');
    const scene = new THREE.Scene();
    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
    const renderer = new THREE.WebGLRenderer({ alpha: true });
    renderer.setSize(window.innerWidth, window.innerHeight);
    renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));
    container.appendChild(renderer.domElement);

    // Central relic
    const relicGeometry = new THREE.SphereGeometry(3, 16, 16);
    const relicMaterial = new THREE.MeshBasicMaterial({ color: 0x3b6d7e, wireframe: true, transparent: true, opacity: 0.6 });
    const relic = new THREE.Mesh(relicGeometry, relicMaterial);
    scene.add(relic);

    // Wisps
    const wispGeometry = new THREE.BufferGeometry();
    const wispMaterial = new THREE.PointsMaterial({ color: 0xf7e7c6, size: 0.08, transparent: true, opacity: 0.5 });
    const wispVertices = [];
    for (let i = 0; i < 1200; i++) {
      const theta = Math.random() * 2 * Math.PI;
      const phi = Math.acos(2 * Math.random() - 1);
      const radius = 8 + Math.random() * 15;
      const x = radius * Math.sin(phi) * Math.cos(theta);
      const y = radius * Math.sin(phi) * Math.sin(theta);
      const z = radius * Math.cos(phi);
      wispVertices.push(x, y, z);
    }
    wispGeometry.setAttribute('position', new THREE.Float32BufferAttribute(wispVertices, 3));
    const wisps = new THREE.Points(wispGeometry, wispMaterial);
    scene.add(wisps);

    // Lanterns
    const lanternGeometry = new THREE.IcosahedronGeometry(0.15, 1);
    const lanternMaterial = new THREE.MeshBasicMaterial({ color: 0xf7e7c6, transparent: true, opacity: 0.8 });
    const lanterns = [];
    for (let i = 0; i < 12; i++) {
      const lantern = new THREE.Mesh(lanternGeometry, lanternMaterial);
      const angle = (i / 12) * Math.PI * 2;
      lantern.position.set(Math.sin(angle) * 4.5, Math.cos(angle) * 4.5, Math.sin(angle * 1.5) * 2);
      lanterns.push(lantern);
      scene.add(lantern);
    }

    camera.position.z = 7;

    let time = 0;
    function animate() {
      requestAnimationFrame(animate);
      time += 0.01;
      relic.rotation.y += 0.0015;
      relic.rotation.x += 0.0008;
      relic.scale.setScalar(1 + 0.05 * Math.sin(time * 0.5));
      wisps.rotation.y += 0.0003;
      wisps.rotation.x += 0.0002;
      lanterns.forEach((lantern, i) => {
        const angle = (i / 12) * Math.PI * 2 + time * 0.4;
        lantern.position.x = Math.sin(angle) * 4.5;
        lantern.position.y = Math.cos(angle) * 4.5;
        lantern.position.z = Math.sin(angle * 1.5 + time) * 2;
        lantern.rotation.y += 0.03;
        lantern.scale.setScalar(1 + 0.15 * Math.sin(time * 0.7 + i));
      });
      renderer.render(scene, camera);
    }
    animate();

    window.addEventListener('resize', () => {
      camera.aspect = window.innerWidth / window.innerHeight;
      camera.updateProjectionMatrix();
      renderer.setSize(window.innerWidth, window.innerHeight);
      renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));
    });

    // Starfall Effect
    const starCanvas = document.getElementById('starfall');
    const starCtx = starCanvas.getContext('2d');
    let stars = [];

    function resizeStarCanvas() {
      starCanvas.width = window.innerWidth;
      starCanvas.height = window.innerHeight;
    }
    resizeStarCanvas();
    window.addEventListener('resize', resizeStarCanvas);

    function createStar() {
      return {
        x: Math.random() * starCanvas.width,
        y: 0,
        radius: Math.random() * 1.5 + 0.5,
        speed: Math.random() * 1 + 0.5
      };
    }

    function drawStars() {
      starCtx.clearRect(0, 0, starCanvas.width, starCanvas.height);
      stars.forEach((star, i) => {
        star.y += star.speed;
        if (star.y > starCanvas.height) stars[i] = createStar();
        starCtx.beginPath();
        starCtx.arc(star.x, star.y, star.radius, 0, Math.PI * 2);
        starCtx.fillStyle = 'rgba(247, 231, 198, 0.7)';
        starCtx.fill();
      });
      while (stars.length < 150) stars.push(createStar());
      requestAnimationFrame(drawStars);
    }
    drawStars();

    // Button click -> reveal dua
    const button = document.getElementById('learn-more');
    const message = document.getElementById('hidden-message');

    function typeMessage(element, messageText, speed = 50) {
      element.innerHTML = '';
      let i = 0;
      function type() {
        if (i < messageText.length) {
          element.innerHTML += messageText.charAt(i);
          i++;
          setTimeout(type, speed);
        }
      }
      type();
    }

    button.addEventListener('click', () => {
      button.style.display = 'none';
      message.style.display = 'block';
      typeMessage(message, 'i never loved a soul how i love you');
    });
  </script>
</body>
</html>